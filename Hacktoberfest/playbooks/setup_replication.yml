---
- name: PostgreSQL Streaming Replication Setup (RHEL PGDG)
  hosts: managed
  become: true
  vars:
    pg_version: 17
    pg_port: 5432
    replication_user: "replicator"
    replication_password: "ReplPass@123"
    pg_data_dir: "/var/lib/pgsql/{{ pg_version }}/data"
    standby_data_dir: "/var/lib/pgsql/{{ pg_version }}/standby_data"
    pg_service_name: "postgresql-{{ pg_version }}"
    pg_basebackup_path: "/usr/pgsql-{{ pg_version }}/bin/pg_basebackup"
    pg_ctl_path: "/usr/pgsql-{{ pg_version }}/bin/pg_ctl"
    primary_ip: "{{ hostvars['pg_primary']['ansible_host'] }}"
    standby_ip: "{{ hostvars['pg_standby']['ansible_host'] }}"

  tasks:

  ### PRIMARY NODE SETUP ###
  - name: Ensure PostgreSQL service is started on primary
    systemd:
      name: "{{ pg_service_name }}"
      state: started
      enabled: yes
    when: "'primary' in group_names"

  - name: Configure postgresql.conf on primary
    lineinfile:
      path: "{{ pg_data_dir }}/postgresql.conf"
      regexp: "^\\s*#?\\s*{{ item.key }}\\s*=.*"
      line: "{{ item.key }} = {{ item.value }}"
      insertafter: EOF
      state: present
    loop:
      - { key: "listen_addresses", value: "'*'" }
      - { key: "port", value: "{{ pg_port }}" }
      - { key: "wal_level", value: "replica" }
      - { key: "max_wal_senders", value: "10" }
      - { key: "hot_standby", value: "on" }
    when: "'primary' in group_names"

  - name: Add replication entries to pg_hba.conf
    blockinfile:
      path: "{{ pg_data_dir }}/pg_hba.conf"
      block: |
        host replication {{ replication_user }} {{ standby_ip }}/32 trust
    when: "'primary' in group_names"

  - name: Create replication user if not exists
    shell: |
      sudo -iu postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='{{ replication_user }}'" | grep -q 1 || \
      sudo -iu postgres psql -c "CREATE ROLE {{ replication_user }} REPLICATION LOGIN PASSWORD '{{ replication_password }}';"
    args:
      executable: /bin/bash
    when: "'primary' in group_names"

  - name: Restart PostgreSQL on primary
    systemd:
      name: "{{ pg_service_name }}"
      state: restarted
    when: "'primary' in group_names"

  ### STANDBY NODE SETUP ###
  - name: Stop PostgreSQL on standby
    systemd:
      name: "{{ pg_service_name }}"
      state: stopped
    when: "'standby' in group_names"

  - name: Remove old standby data directory
    file:
      path: "{{ standby_data_dir }}"
      state: absent
    when: "'standby' in group_names"

  - name: Create .pgpass file on standby
    copy:
      dest: /var/lib/pgsql/.pgpass
      content: "{{ primary_ip }}:{{ pg_port }}:*:{{ replication_user }}:{{ replication_password }}"
      owner: postgres
      group: postgres
      mode: '0600'
    when: "'standby' in group_names"

  - name: Drop replication slot if it already exists
    shell: |
      sudo -iu postgres psql -c "SELECT pg_drop_replication_slot('standby_slot_pg_standby')" || true
    args:
      executable: /bin/bash
    when: "'primary' in group_names"

  - name: Run pg_basebackup on standby
    shell: >
      sudo -iu postgres bash -c 'export PGPASSFILE=/var/lib/pgsql/.pgpass &&
      {{ pg_basebackup_path }} -h {{ primary_ip }} -p {{ pg_port }} -D {{ standby_data_dir }}
      -U {{ replication_user }} -P -v -R -C -S standby_slot_{{ inventory_hostname }}'
    args:
      executable: /bin/bash
    register: basebackup_result
    failed_when: basebackup_result.rc != 0
    when: "'standby' in group_names"

  - name: Ensure correct data_directory in standby postgresql.conf
    lineinfile:
      path: "{{ standby_data_dir }}/postgresql.conf"
      regexp: "^data_directory\\s*=.*"
      line: "data_directory = '{{ standby_data_dir }}'"
      state: present
    when: "'standby' in group_names"

  - name: Set standby port to 5433
    lineinfile:
      path: "{{ standby_data_dir }}/postgresql.conf"
      regexp: "^port\\s*=.*"
      line: "port = 5433"
      state: present
    when: "'standby' in group_names"

  - name: Start standby PostgreSQL using pg_ctl
    shell: "sudo -iu postgres {{ pg_ctl_path }} -D {{ standby_data_dir }} -w -t 120 start"
    args:
      executable: /bin/bash
    when: "'standby' in group_names"

  - name: Enable PostgreSQL service at boot
    systemd:
      name: "{{ pg_service_name }}"
      enabled: yes
    when: "'standby' in group_names"
